import { Client } from 'pg';
import { config } from 'dotenv';
import { resolve } from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import fs from 'fs';

// Charger les variables d'environnement
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
config({ path: resolve(__dirname, '../.env') });

async function runMigrations() {
  const client = new Client({
    connectionString: process.env.POSTGRES_URL,
  });

  try {
    console.log('üöÄ D√©but de la migration de la base de donn√©es...');
    
    await client.connect();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');
    
    // Lire le fichier de sch√©ma
    const schemaPath = resolve(__dirname, '../lib/schema.sql');
    const schema = fs.readFileSync(schemaPath, 'utf8');
    
    console.log('üìù Ex√©cution du sch√©ma SQL...');
    
    // Ex√©cuter le sch√©ma complet
    try {
      await client.query(schema);
      console.log('‚úÖ Sch√©ma ex√©cut√© avec succ√®s !');
    } catch (error) {
      console.log('‚ö†Ô∏è  Erreur lors de l\'ex√©cution du sch√©ma:', error.message);
      console.log('üìù Tentative d\'ex√©cution requ√™te par requ√™te...');
      
      // Diviser et ex√©cuter requ√™te par requ√™te
      const queries = schema
        .split(';')
        .map(q => q.trim())
        .filter(q => q.length > 0 && !q.startsWith('--'));
      
      for (let i = 0; i < queries.length; i++) {
        const query = queries[i];
        if (query.trim()) {
          try {
            await client.query(query);
            console.log(`‚úÖ Requ√™te ${i + 1}/${queries.length} ex√©cut√©e`);
          } catch (err) {
            console.log(`‚ö†Ô∏è  Requ√™te ${i + 1}/${queries.length} ignor√©e:`, err.message);
          }
        }
      }
    }
    
    console.log('üéâ Migration termin√©e !');
    
    // V√©rifier les tables cr√©√©es
    const testResult = await client.query('SELECT COUNT(*) as total_tables FROM information_schema.tables WHERE table_schema = \'public\'');
    console.log(`üìä Nombre de tables cr√©√©es: ${testResult.rows[0].total_tables}`);
    
    const tablesResult = await client.query('SELECT table_name FROM information_schema.tables WHERE table_schema = \'public\' ORDER BY table_name');
    console.log('üìã Tables disponibles:', tablesResult.rows.map(row => row.table_name).join(', '));
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    process.exit(1);
  } finally {
    await client.end();
  }
}

// Ex√©cuter la migration
runMigrations(); 